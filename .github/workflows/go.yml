
name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Build
      run: make build

    - name: Bundle
      run: make bundle

    - name: Remove release
      id: remove_release
      uses: actions/github-script@v4
      with:
         github-token: ${{ secrets.PAT }}
         script: |
            const { octokit } = require('@octokit/core');
            const { paginateRest } = require('@octokit/plugin-paginate-rest');
            const MyOctokit = octokit.plugin(paginateRest);
            const octokit = new MyOctokit({ auth: process.env.GITHUB_TOKEN });
            const owner = process.env.GITHUB_REPOSITORY.split('/')[0];
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
            const releases = await octokit.paginate('GET /repos/{owner}/{repo}/releases');
            for (const release of releases) {
                if (release.tag_name === 'v1.0.0') {
                await octokit.request('DELETE /repos/{owner}/{repo}/releases/{release_id}', {
                    owner,
                    repo,
                    release_id: release.id
                });
                }
            }

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.tar.gz
        asset_name: release.tar.gz
        asset_content_type: application/gzip
